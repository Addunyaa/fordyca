import os

from ycmd import utils
import ycm_core

SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']
HEADER_EXTENSIONS = ['.h', '.hxx', '.hpp', '.hh']

# We cache the database for any given source directory
compilation_database_dir_map = dict()


# Return a compilation database object for the supplied path or None if none
# could be found.
#
# We search up the directory hierarchy, to first see if we have a compilation
# database already for that path, or if a compile_commands.json file exists in
# that directory.
def FindCompilationDatabase(wd):
    # Find all the ancestor directories of the supplied directory
    for folder in utils.PathsToAllParentFolders(wd):
        # Did we already cache a datbase for this path?
        if folder in compilation_database_dir_map:
            # Yep. Return that.
            return compilation_database_dir_map[folder]

        # Guess not. Let's see if a compile_commands.json file already exists...
        compile_commands = os.path.join(folder, 'compile_commands.json')
        if os.path.exists(compile_commands):
            # Yes, it exists. Create a database and cache it in our map.
            database = ycm_core.CompilationDatabase(folder)
            compilation_database_dir_map[folder] = database
            return database

        # Doesn't exist. Check the next ancestor

    # Nothing was found. No compilation flags are available.
    return None


# Find the compilation info structure from the supplied database for the
# supplied file. If the source file is a header, try and find an appropriate
# source file and return the compilation_info for that.
def GetCompilationInfoForFile(database, file_name):

    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if os.path.splitext(file_name)[1] in HEADER_EXTENSIONS:
        # It's a header file
        basename = os.path.splitext(file_name)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                # We found a corresponding source file with the same basename. Try and
                # get the flags for that file.
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file)
                if compilation_info.compiler_flags_:
                    return compilation_info

        # No corresponding source file was found, so we can't generate any flags for
        # this header file.
        return None

    # It's a source file. Just ask the database for the flags.
    return database.GetCompilationInfoForFile(file_name)


# ycmd calls this method to get the compile flags for a given file. It returns a
# dictionary with 2 keys: 'flags' and 'do_cache', or None if no flags can be
# found.
def FlagsForFile(file_name, **kwargs):
    # Create or retrieve the cached compilation database object
    database = FindCompilationDatabase(os.path.dirname(file_name))
    if database is None:
        return None

    compilation_info = GetCompilationInfoForFile(database, file_name)
    if compilation_info is None:
        return None

    return {
        # We pass the compiler flags from the database unmodified.
        'flags': compilation_info.compiler_flags_,

        # We always want to use ycmd's cache, as this significantly improves
        # performance.
        'do_cache': True
    }
